// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package clonefactory

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ClonefactoryMetaData contains all meta data concerning the Clonefactory contract.
var ClonefactoryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lmn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"clonefactoryContractPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_pubkey\",\"type\":\"string\"}],\"name\":\"contractCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getContractList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rentalContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_speed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_pubKey\",\"type\":\"string\"}],\"name\":\"setCreateNewRentalContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_cipherText\",\"type\":\"string\"}],\"name\":\"setPurchaseRentalContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040516200388538038062003885833981810160405281019062000037919062000198565b6000604051620000479062000173565b604051809103906000f08015801562000064573d6000803e3d6000fd5b509050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000232565b6126ce80620011b783390190565b600081519050620001928162000218565b92915050565b60008060408385031215620001b257620001b162000213565b5b6000620001c28582860162000181565b9250506020620001d58582860162000181565b9150509250929050565b6000620001ec82620001f3565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200022381620001df565b81146200022f57600080fd5b50565b610f7580620002426000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806353da020614610051578063739a835314610081578063867126861461009d57806399acac8c146100cd575b600080fd5b61006b6004803603810190610066919061088a565b6100eb565b6040516100789190610ad2565b60405180910390f35b61009b60048036038101906100969190610801565b61012a565b005b6100b760048036038101906100b291906108e4565b61044c565b6040516100c49190610ad2565b60405180910390f35b6100d56105d4565b6040516100e29190610b4d565b60405180910390f35b600481815481106100fb57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600082905060008173ffffffffffffffffffffffffffffffffffffffff1663a035b1fe6040518163ffffffff1660e01b815260040160206040518083038186803b15801561017757600080fd5b505afa15801561018b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101af91906108b7565b905080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b815260040161020f929190610aed565b60206040518083038186803b15801561022757600080fd5b505afa15801561023b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025f91906108b7565b10156102a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029790610c01565b60405180910390fd5b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3387856040518463ffffffff1660e01b815260040161030193929190610b16565b602060405180830381600087803b15801561031b57600080fd5b505af115801561032f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610353919061085d565b905080610395576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038c90610bc1565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1663ddcb1bf285336040518363ffffffff1660e01b81526004016103d0929190610b91565b600060405180830381600087803b1580156103ea57600080fd5b505af11580156103fe573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff167fbf1df41b401a1bb8d9bd03fb6fe59b6ced0e61a76cdd3d3d511b4d06eb2cdebe60405160405180910390a25050505050565b60008061047860008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610668565b90508073ffffffffffffffffffffffffffffffffffffffff16633a5d42138989898933600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16308c6040518963ffffffff1660e01b81526004016104e3989796959493929190610c21565b600060405180830381600087803b1580156104fd57600080fd5b505af1158015610511573d6000803e3d6000fd5b505050506004819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f1b08e1646439b7521399d47f93ab6b1ebc92803e155d0b2f2ad2d4702a050804846040516105be9190610b6f565b60405180910390a2809150509695505050505050565b60606000600480548060200260200160405190810160405280929190818152602001828054801561065a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610610575b505050505090508091505090565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f0915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610738576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072f90610be1565b60405180910390fd5b919050565b600061075061074b84610cc4565b610c9f565b90508281526020810184848401111561076c5761076b610e39565b5b610777848285610d92565b509392505050565b60008135905061078e81610efa565b92915050565b6000815190506107a381610f11565b92915050565b600082601f8301126107be576107bd610e34565b5b81356107ce84826020860161073d565b91505092915050565b6000813590506107e681610f28565b92915050565b6000815190506107fb81610f28565b92915050565b6000806040838503121561081857610817610e43565b5b60006108268582860161077f565b925050602083013567ffffffffffffffff81111561084757610846610e3e565b5b610853858286016107a9565b9150509250929050565b60006020828403121561087357610872610e43565b5b600061088184828501610794565b91505092915050565b6000602082840312156108a05761089f610e43565b5b60006108ae848285016107d7565b91505092915050565b6000602082840312156108cd576108cc610e43565b5b60006108db848285016107ec565b91505092915050565b60008060008060008060c0878903121561090157610900610e43565b5b600061090f89828a016107d7565b965050602061092089828a016107d7565b955050604061093189828a016107d7565b945050606061094289828a016107d7565b935050608061095389828a0161077f565b92505060a087013567ffffffffffffffff81111561097457610973610e3e565b5b61098089828a016107a9565b9150509295509295509295565b600061099983836109a5565b60208301905092915050565b6109ae81610d4a565b82525050565b6109bd81610d4a565b82525050565b60006109ce82610d05565b6109d88185610d28565b93506109e383610cf5565b8060005b83811015610a145781516109fb888261098d565b9750610a0683610d1b565b9250506001810190506109e7565b5085935050505092915050565b6000610a2c82610d10565b610a368185610d39565b9350610a46818560208601610da1565b610a4f81610e48565b840191505092915050565b6000610a67601683610d39565b9150610a7282610e59565b602082019050919050565b6000610a8a601683610d39565b9150610a9582610e82565b602082019050919050565b6000610aad602683610d39565b9150610ab882610eab565b604082019050919050565b610acc81610d88565b82525050565b6000602082019050610ae760008301846109b4565b92915050565b6000604082019050610b0260008301856109b4565b610b0f60208301846109b4565b9392505050565b6000606082019050610b2b60008301866109b4565b610b3860208301856109b4565b610b456040830184610ac3565b949350505050565b60006020820190508181036000830152610b6781846109c3565b905092915050565b60006020820190508181036000830152610b898184610a21565b905092915050565b60006040820190508181036000830152610bab8185610a21565b9050610bba60208301846109b4565b9392505050565b60006020820190508181036000830152610bda81610a5a565b9050919050565b60006020820190508181036000830152610bfa81610a7d565b9050919050565b60006020820190508181036000830152610c1a81610aa0565b9050919050565b600061010082019050610c37600083018b610ac3565b610c44602083018a610ac3565b610c516040830189610ac3565b610c5e6060830188610ac3565b610c6b60808301876109b4565b610c7860a08301866109b4565b610c8560c08301856109b4565b610c9260e08301846109b4565b9998505050505050505050565b6000610ca9610cba565b9050610cb58282610dd4565b919050565b6000604051905090565b600067ffffffffffffffff821115610cdf57610cde610e05565b5b610ce882610e48565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610d5582610d68565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610dbf578082015181840152602081019050610da4565b83811115610dce576000848401525b50505050565b610ddd82610e48565b810181811067ffffffffffffffff82111715610dfc57610dfb610e05565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f6c756d6569726e207472616e666572206661696c656400000000000000000000600082015250565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b7f6e6f7420617574686f72697a656420746f207370656e6420726571756972656460008201527f2066756e64730000000000000000000000000000000000000000000000000000602082015250565b610f0381610d4a565b8114610f0e57600080fd5b50565b610f1a81610d5c565b8114610f2557600080fd5b50565b610f3181610d88565b8114610f3c57600080fd5b5056fea2646970667358221220399f2d86ad62a5432c3cd8af2d483d311c57b8d7b5ec8ae6beb5a7a70d9d32b864736f6c63430008070033608060405234801561001057600080fd5b50600180819055506126a7806100276000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80638b7e4b13116100ad578063c5095d6811610071578063c5095d68146102c4578063ca3225fa146102e2578063ce0c722a14610308578063ddcb1bf214610326578063f1a6e3011461034257610121565b80638b7e4b13146102305780638e2e6d5d1461024e578063a035b1fe1461026a578063a4d66daf14610288578063c20906ac146102a657610121565b80631f7b6d32116100f45780631f7b6d321461019e5780633a5d4213146101bc5780637150d8ae146101d8578063719e6b5b146101f657806385209ee01461021257610121565b806308551a5314610126578063089aa8a2146101445780630a61e2d91461016257806316713b3714610180575b600080fd5b61012e61035e565b60405161013b9190611ba6565b60405180910390f35b61014c610384565b6040516101599190611ba6565b60405180910390f35b61016a6103aa565b6040516101779190611e5b565b60405180910390f35b6101886103b0565b6040516101959190611e5b565b60405180910390f35b6101a66103b6565b6040516101b39190611e5b565b60405180910390f35b6101d660048036038101906101d19190611848565b6103bc565b005b6101e06105b0565b6040516101ed9190611ba6565b60405180910390f35b610210600480360381019061020b9190611749565b6105d6565b005b61021a61072c565b6040516102279190611bea565b60405180910390f35b61023861073f565b6040516102459190611c99565b60405180910390f35b610268600480360381019061026391906117ee565b6107cd565b005b610272610ad5565b60405161027f9190611e5b565b60405180910390f35b610290610adb565b60405161029d9190611e5b565b60405180910390f35b6102ae610ae1565b6040516102bb9190611e5b565b60405180910390f35b6102cc610ae7565b6040516102d99190611e5b565b60405180910390f35b6102ea610aed565b6040516102ff99989796959493929190611c05565b60405180910390f35b610310610c0b565b60405161031d9190611ba6565b60405180910390f35b610340600480360381019061033b9190611792565b610c31565b005b61035c600480360381019061035791906118fe565b610e59565b005b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b60055481565b600a5481565b600060019054906101000a900460ff16806103e2575060008054906101000a900460ff16155b610421576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041890611dbb565b60405180910390fd5b60008060019054906101000a900460ff161590508015610471576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b88600781905550876008819055508660098190555085600a8190555084600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600660146101000a81548160ff0219169083600181111561057657610575612117565b5b02179055506105848461105c565b80156105a55760008060016101000a81548160ff0219169083151502179055505b505050505050505050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610666576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065d90611cbb565b60405180910390fd5b60018081111561067957610678612117565b5b600660149054906101000a900460ff16600181111561069b5761069a612117565b5b146106db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d290611dfb565b60405180910390fd5b80601090805190602001906106f19291906115b5565b507f2301ef7d9f42b857543faf9e285b5807e028d4ae99810ea7fe0aadda3a717e9d816040516107219190611c99565b60405180910390a150565b600660149054906101000a900460ff1681565b6010805461074c90612056565b80601f016020809104026020016040519081016040528092919081815260200182805461077890612056565b80156107c55780601f1061079a576101008083540402835291602001916107c5565b820191906000526020600020905b8154815290600101906020018083116107a857829003601f168201915b505050505081565b600081141561091b57600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061087f5750600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6108be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b590611d3b565b60405180910390fd5b60006108c86110a0565b90506108e1816007546108db9190611f73565b826110e1565b6108e96112e7565b7ff5e1a452bb76d7335225182a97ad694be2c7b4b5d75dcffb67ddf15db95f484460405160405180910390a150610ad2565b60018114156109d657600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ab90611e1b565b60405180910390fd5b6109d16109bf6110a0565b6007546109cc9190611f73565b61139d565b610ad1565b60028114806109e55750600381145b15610a8c57600a54600b54426109fb9190611f73565b1015610a3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3390611cdb565b60405180910390fd5b6003811415610a5357610a5260075460006110e1565b5b610a5b6112e7565b7ff5e1a452bb76d7335225182a97ad694be2c7b4b5d75dcffb67ddf15db95f484460405160405180910390a1610ad0565b60048110610acf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac690611d9b565b60405180910390fd5b5b5b5b50565b60075481565b60085481565b60095481565b600b5481565b6000806000806000806000806060600660149054906101000a900460ff16600754600854600954600a54600b54600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166010808054610b6e90612056565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9a90612056565b8015610be75780601f10610bbc57610100808354040283529160200191610be7565b820191906000526020600020905b815481529060010190602001808311610bca57829003601f168201915b50505050509050985098509850985098509850985098509850909192939495969798565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006001811115610c4557610c44612117565b5b600660149054906101000a900460ff166001811115610c6757610c66612117565b5b14610ca7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9e90611d5b565b60405180910390fd5b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2e90611d7b565b60405180910390fd5b8160109080519060200190610d4d9291906115b5565b5080600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555042600b819055506001600660146101000a81548160ff02191690836001811115610dbc57610dbb612117565b5b0217905550610e12600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600754611527565b3373ffffffffffffffffffffffffffffffffffffffff167f0c00d1d6cea0bd55f7d3b6e92ef60237b117b050185fc2816c708fd45f45e5bb60405160405180910390a25050565b6000600b5442610e699190611f73565b9050600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610efb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef290611ddb565b60405180910390fd5b600180811115610f0e57610f0d612117565b5b600660149054906101000a900460ff166001811115610f3057610f2f612117565b5b14610f70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6790611cfb565b60405180910390fd5b6002821480610f7f5750600382145b610fbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb590611d1b565b60405180910390fd5b600a54811015611003576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ffa90611cdb565b60405180910390fd5b61100c826107cd565b85600781905550846008819055508360098190555082600a819055507f03e052767f275c0c51cc93a76255d42498341feb7a5beef7cc11fd57c5b6681860405160405180910390a1505050505050565b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600b54426110b19190611f73565b9050600a5481600a546110c49190611f73565b6007546110d19190611f19565b6110db9190611ee8565b91505090565b60026001541415611127576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111e90611e3b565b60405180910390fd5b6002600181905550600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b81526004016111ae929190611bc1565b602060405180830381600087803b1580156111c857600080fd5b505af11580156111dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611200919061171c565b50600081146112dc57600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401611288929190611bc1565b602060405180830381600087803b1580156112a257600080fd5b505af11580156112b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112da919061171c565b505b600180819055505050565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604051806020016040528060008152506010908051906020019061136f9291906115b5565b506000600660146101000a81548160ff0219169083600181111561139657611395612117565b5b0217905550565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161145a9190611ba6565b60206040518083038186803b15801561147257600080fd5b505afa158015611486573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114aa919061181b565b6114b49190611f73565b6040518363ffffffff1660e01b81526004016114d1929190611bc1565b602060405180830381600087803b1580156114eb57600080fd5b505af11580156114ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611523919061171c565b5050565b82600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600481905550505050565b8280546115c190612056565b90600052602060002090601f0160209004810192826115e3576000855561162a565b82601f106115fc57805160ff191683800117855561162a565b8280016001018555821561162a579182015b8281111561162957825182559160200191906001019061160e565b5b509050611637919061163b565b5090565b5b8082111561165457600081600090555060010161163c565b5090565b600061166b61166684611e9b565b611e76565b905082815260208101848484011115611687576116866121a9565b5b611692848285612014565b509392505050565b6000813590506116a98161262c565b92915050565b6000815190506116be81612643565b92915050565b600082601f8301126116d9576116d86121a4565b5b81356116e9848260208601611658565b91505092915050565b6000813590506117018161265a565b92915050565b6000815190506117168161265a565b92915050565b600060208284031215611732576117316121b3565b5b6000611740848285016116af565b91505092915050565b60006020828403121561175f5761175e6121b3565b5b600082013567ffffffffffffffff81111561177d5761177c6121ae565b5b611789848285016116c4565b91505092915050565b600080604083850312156117a9576117a86121b3565b5b600083013567ffffffffffffffff8111156117c7576117c66121ae565b5b6117d3858286016116c4565b92505060206117e48582860161169a565b9150509250929050565b600060208284031215611804576118036121b3565b5b6000611812848285016116f2565b91505092915050565b600060208284031215611831576118306121b3565b5b600061183f84828501611707565b91505092915050565b600080600080600080600080610100898b031215611869576118686121b3565b5b60006118778b828c016116f2565b98505060206118888b828c016116f2565b97505060406118998b828c016116f2565b96505060606118aa8b828c016116f2565b95505060806118bb8b828c0161169a565b94505060a06118cc8b828c0161169a565b93505060c06118dd8b828c0161169a565b92505060e06118ee8b828c0161169a565b9150509295985092959890939650565b600080600080600060a0868803121561191a576119196121b3565b5b6000611928888289016116f2565b9550506020611939888289016116f2565b945050604061194a888289016116f2565b935050606061195b888289016116f2565b925050608061196c888289016116f2565b9150509295509295909350565b61198281611fa7565b82525050565b61199181612002565b82525050565b60006119a282611ecc565b6119ac8185611ed7565b93506119bc818560208601612023565b6119c5816121b8565b840191505092915050565b60006119dd604383611ed7565b91506119e8826121c9565b606082019050919050565b6000611a00602a83611ed7565b9150611a0b8261223e565b604082019050919050565b6000611a23602b83611ed7565b9150611a2e8261228d565b604082019050919050565b6000611a46602883611ed7565b9150611a51826122dc565b604082019050919050565b6000611a69603b83611ed7565b9150611a748261232b565b604082019050919050565b6000611a8c602583611ed7565b9150611a978261237a565b604082019050919050565b6000611aaf603a83611ed7565b9150611aba826123c9565b604082019050919050565b6000611ad2602983611ed7565b9150611add82612418565b604082019050919050565b6000611af5602e83611ed7565b9150611b0082612467565b604082019050919050565b6000611b18604383611ed7565b9150611b23826124b6565b606082019050919050565b6000611b3b602883611ed7565b9150611b468261252b565b604082019050919050565b6000611b5e604183611ed7565b9150611b698261257a565b606082019050919050565b6000611b81601f83611ed7565b9150611b8c826125ef565b602082019050919050565b611ba081611ff8565b82525050565b6000602082019050611bbb6000830184611979565b92915050565b6000604082019050611bd66000830185611979565b611be36020830184611b97565b9392505050565b6000602082019050611bff6000830184611988565b92915050565b600061012082019050611c1b600083018c611988565b611c28602083018b611b97565b611c35604083018a611b97565b611c426060830189611b97565b611c4f6080830188611b97565b611c5c60a0830187611b97565b611c6960c0830186611979565b611c7660e0830185611979565b818103610100830152611c898184611997565b90509a9950505050505050505050565b60006020820190508181036000830152611cb38184611997565b905092915050565b60006020820190508181036000830152611cd4816119d0565b9050919050565b60006020820190508181036000830152611cf4816119f3565b9050919050565b60006020820190508181036000830152611d1481611a16565b9050919050565b60006020820190508181036000830152611d3481611a39565b9050919050565b60006020820190508181036000830152611d5481611a5c565b9050919050565b60006020820190508181036000830152611d7481611a7f565b9050919050565b60006020820190508181036000830152611d9481611aa2565b9050919050565b60006020820190508181036000830152611db481611ac5565b9050919050565b60006020820190508181036000830152611dd481611ae8565b9050919050565b60006020820190508181036000830152611df481611b0b565b9050919050565b60006020820190508181036000830152611e1481611b2e565b9050919050565b60006020820190508181036000830152611e3481611b51565b9050919050565b60006020820190508181036000830152611e5481611b74565b9050919050565b6000602082019050611e706000830184611b97565b92915050565b6000611e80611e91565b9050611e8c8282612088565b919050565b6000604051905090565b600067ffffffffffffffff821115611eb657611eb5612175565b5b611ebf826121b8565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000611ef382611ff8565b9150611efe83611ff8565b925082611f0e57611f0d6120e8565b5b828204905092915050565b6000611f2482611ff8565b9150611f2f83611ff8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611f6857611f676120b9565b5b828202905092915050565b6000611f7e82611ff8565b9150611f8983611ff8565b925082821015611f9c57611f9b6120b9565b5b828203905092915050565b6000611fb282611fd8565b9050919050565b60008115159050919050565b6000819050611fd382612618565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061200d82611fc5565b9050919050565b82818337600083830152505050565b60005b83811015612041578082015181840152602081019050612026565b83811115612050576000848401525b50505050565b6000600282049050600182168061206e57607f821691505b6020821081141561208257612081612146565b5b50919050565b612091826121b8565b810181811067ffffffffffffffff821117156120b0576120af612175565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f74686973206163636f756e74206973206e6f7420617574686f72697a6564207460008201527f6f2075706461746520746865206369706865727465787420696e666f726d617460208201527f696f6e0000000000000000000000000000000000000000000000000000000000604082015250565b7f74686520636f6e7472616374206861732079657420746f20626520636172726960008201527f656420746f207465726d00000000000000000000000000000000000000000000602082015250565b7f74686973206973206163636f756e74206973206e6f7420696e2074686520727560008201527f6e6e696e67207374617465000000000000000000000000000000000000000000602082015250565b7f796f752063616e206f6e6c792075736520636c6f73656f7574206f7074696f6e60008201527f732032206f722033000000000000000000000000000000000000000000000000602082015250565b7f74686973206163636f756e74206973206e6f7420617574686f72697a6564207460008201527f6f207472696767657220616e206561726c7920636c6f73656f75740000000000602082015250565b7f636f6e7472616374206973206e6f7420696e20616e20617661696c61626c652060008201527f7374617465000000000000000000000000000000000000000000000000000000602082015250565b7f746869732061646472657373206973206e6f7420617070726f76656420746f2060008201527f63616c6c207468652070757263686173652066756e6374696f6e000000000000602082015250565b7f796f75206d757374206d616b6520612073656c656374696f6e2062657477656560008201527f6e203020616e6420330000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f74686973206973206163636f756e74206973206e6f7420617574686f72697a6560008201527f6420746f207570646174652074686520636f6e747261637420706172616d657460208201527f6572730000000000000000000000000000000000000000000000000000000000604082015250565b7f74686520636f6e7472616374206973206e6f7420696e207468652072756e6e6960008201527f6e67207374617465000000000000000000000000000000000000000000000000602082015250565b7f74686973206163636f756e74206973206e6f7420617574686f72697a6564207460008201527f6f20747269676765722061206d69642d636f6e747261637420636c6f73656f7560208201527f7400000000000000000000000000000000000000000000000000000000000000604082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6002811061262957612628612117565b5b50565b61263581611fa7565b811461264057600080fd5b50565b61264c81611fb9565b811461265757600080fd5b50565b61266381611ff8565b811461266e57600080fd5b5056fea26469706673582212207bce95be2d6ab00e3674a5952406bf0d8068d97ae278ee826079136d1d3d603464736f6c63430008070033",
}

// ClonefactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use ClonefactoryMetaData.ABI instead.
var ClonefactoryABI = ClonefactoryMetaData.ABI

// ClonefactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ClonefactoryMetaData.Bin instead.
var ClonefactoryBin = ClonefactoryMetaData.Bin

// DeployClonefactory deploys a new Ethereum contract, binding an instance of Clonefactory to it.
func DeployClonefactory(auth *bind.TransactOpts, backend bind.ContractBackend, _lmn common.Address, _validator common.Address) (common.Address, *types.Transaction, *Clonefactory, error) {
	parsed, err := ClonefactoryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ClonefactoryBin), backend, _lmn, _validator)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Clonefactory{ClonefactoryCaller: ClonefactoryCaller{contract: contract}, ClonefactoryTransactor: ClonefactoryTransactor{contract: contract}, ClonefactoryFilterer: ClonefactoryFilterer{contract: contract}}, nil
}

// Clonefactory is an auto generated Go binding around an Ethereum contract.
type Clonefactory struct {
	ClonefactoryCaller     // Read-only binding to the contract
	ClonefactoryTransactor // Write-only binding to the contract
	ClonefactoryFilterer   // Log filterer for contract events
}

// ClonefactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type ClonefactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ClonefactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ClonefactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ClonefactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ClonefactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ClonefactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ClonefactorySession struct {
	Contract     *Clonefactory     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ClonefactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ClonefactoryCallerSession struct {
	Contract *ClonefactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// ClonefactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ClonefactoryTransactorSession struct {
	Contract     *ClonefactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ClonefactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type ClonefactoryRaw struct {
	Contract *Clonefactory // Generic contract binding to access the raw methods on
}

// ClonefactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ClonefactoryCallerRaw struct {
	Contract *ClonefactoryCaller // Generic read-only contract binding to access the raw methods on
}

// ClonefactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ClonefactoryTransactorRaw struct {
	Contract *ClonefactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewClonefactory creates a new instance of Clonefactory, bound to a specific deployed contract.
func NewClonefactory(address common.Address, backend bind.ContractBackend) (*Clonefactory, error) {
	contract, err := bindClonefactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Clonefactory{ClonefactoryCaller: ClonefactoryCaller{contract: contract}, ClonefactoryTransactor: ClonefactoryTransactor{contract: contract}, ClonefactoryFilterer: ClonefactoryFilterer{contract: contract}}, nil
}

// NewClonefactoryCaller creates a new read-only instance of Clonefactory, bound to a specific deployed contract.
func NewClonefactoryCaller(address common.Address, caller bind.ContractCaller) (*ClonefactoryCaller, error) {
	contract, err := bindClonefactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ClonefactoryCaller{contract: contract}, nil
}

// NewClonefactoryTransactor creates a new write-only instance of Clonefactory, bound to a specific deployed contract.
func NewClonefactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*ClonefactoryTransactor, error) {
	contract, err := bindClonefactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ClonefactoryTransactor{contract: contract}, nil
}

// NewClonefactoryFilterer creates a new log filterer instance of Clonefactory, bound to a specific deployed contract.
func NewClonefactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*ClonefactoryFilterer, error) {
	contract, err := bindClonefactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ClonefactoryFilterer{contract: contract}, nil
}

// bindClonefactory binds a generic wrapper to an already deployed contract.
func bindClonefactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ClonefactoryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Clonefactory *ClonefactoryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Clonefactory.Contract.ClonefactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Clonefactory *ClonefactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Clonefactory.Contract.ClonefactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Clonefactory *ClonefactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Clonefactory.Contract.ClonefactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Clonefactory *ClonefactoryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Clonefactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Clonefactory *ClonefactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Clonefactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Clonefactory *ClonefactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Clonefactory.Contract.contract.Transact(opts, method, params...)
}

// GetContractList is a free data retrieval call binding the contract method 0x99acac8c.
//
// Solidity: function getContractList() view returns(address[])
func (_Clonefactory *ClonefactoryCaller) GetContractList(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Clonefactory.contract.Call(opts, &out, "getContractList")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetContractList is a free data retrieval call binding the contract method 0x99acac8c.
//
// Solidity: function getContractList() view returns(address[])
func (_Clonefactory *ClonefactorySession) GetContractList() ([]common.Address, error) {
	return _Clonefactory.Contract.GetContractList(&_Clonefactory.CallOpts)
}

// GetContractList is a free data retrieval call binding the contract method 0x99acac8c.
//
// Solidity: function getContractList() view returns(address[])
func (_Clonefactory *ClonefactoryCallerSession) GetContractList() ([]common.Address, error) {
	return _Clonefactory.Contract.GetContractList(&_Clonefactory.CallOpts)
}

// RentalContracts is a free data retrieval call binding the contract method 0x53da0206.
//
// Solidity: function rentalContracts(uint256 ) view returns(address)
func (_Clonefactory *ClonefactoryCaller) RentalContracts(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Clonefactory.contract.Call(opts, &out, "rentalContracts", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RentalContracts is a free data retrieval call binding the contract method 0x53da0206.
//
// Solidity: function rentalContracts(uint256 ) view returns(address)
func (_Clonefactory *ClonefactorySession) RentalContracts(arg0 *big.Int) (common.Address, error) {
	return _Clonefactory.Contract.RentalContracts(&_Clonefactory.CallOpts, arg0)
}

// RentalContracts is a free data retrieval call binding the contract method 0x53da0206.
//
// Solidity: function rentalContracts(uint256 ) view returns(address)
func (_Clonefactory *ClonefactoryCallerSession) RentalContracts(arg0 *big.Int) (common.Address, error) {
	return _Clonefactory.Contract.RentalContracts(&_Clonefactory.CallOpts, arg0)
}

// SetCreateNewRentalContract is a paid mutator transaction binding the contract method 0x86712686.
//
// Solidity: function setCreateNewRentalContract(uint256 _price, uint256 _limit, uint256 _speed, uint256 _length, address _validator, string _pubKey) returns(address)
func (_Clonefactory *ClonefactoryTransactor) SetCreateNewRentalContract(opts *bind.TransactOpts, _price *big.Int, _limit *big.Int, _speed *big.Int, _length *big.Int, _validator common.Address, _pubKey string) (*types.Transaction, error) {
	return _Clonefactory.contract.Transact(opts, "setCreateNewRentalContract", _price, _limit, _speed, _length, _validator, _pubKey)
}

// SetCreateNewRentalContract is a paid mutator transaction binding the contract method 0x86712686.
//
// Solidity: function setCreateNewRentalContract(uint256 _price, uint256 _limit, uint256 _speed, uint256 _length, address _validator, string _pubKey) returns(address)
func (_Clonefactory *ClonefactorySession) SetCreateNewRentalContract(_price *big.Int, _limit *big.Int, _speed *big.Int, _length *big.Int, _validator common.Address, _pubKey string) (*types.Transaction, error) {
	return _Clonefactory.Contract.SetCreateNewRentalContract(&_Clonefactory.TransactOpts, _price, _limit, _speed, _length, _validator, _pubKey)
}

// SetCreateNewRentalContract is a paid mutator transaction binding the contract method 0x86712686.
//
// Solidity: function setCreateNewRentalContract(uint256 _price, uint256 _limit, uint256 _speed, uint256 _length, address _validator, string _pubKey) returns(address)
func (_Clonefactory *ClonefactoryTransactorSession) SetCreateNewRentalContract(_price *big.Int, _limit *big.Int, _speed *big.Int, _length *big.Int, _validator common.Address, _pubKey string) (*types.Transaction, error) {
	return _Clonefactory.Contract.SetCreateNewRentalContract(&_Clonefactory.TransactOpts, _price, _limit, _speed, _length, _validator, _pubKey)
}

// SetPurchaseRentalContract is a paid mutator transaction binding the contract method 0x739a8353.
//
// Solidity: function setPurchaseRentalContract(address contractAddress, string _cipherText) returns()
func (_Clonefactory *ClonefactoryTransactor) SetPurchaseRentalContract(opts *bind.TransactOpts, contractAddress common.Address, _cipherText string) (*types.Transaction, error) {
	return _Clonefactory.contract.Transact(opts, "setPurchaseRentalContract", contractAddress, _cipherText)
}

// SetPurchaseRentalContract is a paid mutator transaction binding the contract method 0x739a8353.
//
// Solidity: function setPurchaseRentalContract(address contractAddress, string _cipherText) returns()
func (_Clonefactory *ClonefactorySession) SetPurchaseRentalContract(contractAddress common.Address, _cipherText string) (*types.Transaction, error) {
	return _Clonefactory.Contract.SetPurchaseRentalContract(&_Clonefactory.TransactOpts, contractAddress, _cipherText)
}

// SetPurchaseRentalContract is a paid mutator transaction binding the contract method 0x739a8353.
//
// Solidity: function setPurchaseRentalContract(address contractAddress, string _cipherText) returns()
func (_Clonefactory *ClonefactoryTransactorSession) SetPurchaseRentalContract(contractAddress common.Address, _cipherText string) (*types.Transaction, error) {
	return _Clonefactory.Contract.SetPurchaseRentalContract(&_Clonefactory.TransactOpts, contractAddress, _cipherText)
}

// ClonefactoryClonefactoryContractPurchasedIterator is returned from FilterClonefactoryContractPurchased and is used to iterate over the raw logs and unpacked data for ClonefactoryContractPurchased events raised by the Clonefactory contract.
type ClonefactoryClonefactoryContractPurchasedIterator struct {
	Event *ClonefactoryClonefactoryContractPurchased // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClonefactoryClonefactoryContractPurchasedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClonefactoryClonefactoryContractPurchased)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClonefactoryClonefactoryContractPurchased)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClonefactoryClonefactoryContractPurchasedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClonefactoryClonefactoryContractPurchasedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClonefactoryClonefactoryContractPurchased represents a ClonefactoryContractPurchased event raised by the Clonefactory contract.
type ClonefactoryClonefactoryContractPurchased struct {
	Address common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterClonefactoryContractPurchased is a free log retrieval operation binding the contract event 0xbf1df41b401a1bb8d9bd03fb6fe59b6ced0e61a76cdd3d3d511b4d06eb2cdebe.
//
// Solidity: event clonefactoryContractPurchased(address indexed _address)
func (_Clonefactory *ClonefactoryFilterer) FilterClonefactoryContractPurchased(opts *bind.FilterOpts, _address []common.Address) (*ClonefactoryClonefactoryContractPurchasedIterator, error) {

	var _addressRule []interface{}
	for _, _addressItem := range _address {
		_addressRule = append(_addressRule, _addressItem)
	}

	logs, sub, err := _Clonefactory.contract.FilterLogs(opts, "clonefactoryContractPurchased", _addressRule)
	if err != nil {
		return nil, err
	}
	return &ClonefactoryClonefactoryContractPurchasedIterator{contract: _Clonefactory.contract, event: "clonefactoryContractPurchased", logs: logs, sub: sub}, nil
}

// WatchClonefactoryContractPurchased is a free log subscription operation binding the contract event 0xbf1df41b401a1bb8d9bd03fb6fe59b6ced0e61a76cdd3d3d511b4d06eb2cdebe.
//
// Solidity: event clonefactoryContractPurchased(address indexed _address)
func (_Clonefactory *ClonefactoryFilterer) WatchClonefactoryContractPurchased(opts *bind.WatchOpts, sink chan<- *ClonefactoryClonefactoryContractPurchased, _address []common.Address) (event.Subscription, error) {

	var _addressRule []interface{}
	for _, _addressItem := range _address {
		_addressRule = append(_addressRule, _addressItem)
	}

	logs, sub, err := _Clonefactory.contract.WatchLogs(opts, "clonefactoryContractPurchased", _addressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClonefactoryClonefactoryContractPurchased)
				if err := _Clonefactory.contract.UnpackLog(event, "clonefactoryContractPurchased", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClonefactoryContractPurchased is a log parse operation binding the contract event 0xbf1df41b401a1bb8d9bd03fb6fe59b6ced0e61a76cdd3d3d511b4d06eb2cdebe.
//
// Solidity: event clonefactoryContractPurchased(address indexed _address)
func (_Clonefactory *ClonefactoryFilterer) ParseClonefactoryContractPurchased(log types.Log) (*ClonefactoryClonefactoryContractPurchased, error) {
	event := new(ClonefactoryClonefactoryContractPurchased)
	if err := _Clonefactory.contract.UnpackLog(event, "clonefactoryContractPurchased", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ClonefactoryContractCreatedIterator is returned from FilterContractCreated and is used to iterate over the raw logs and unpacked data for ContractCreated events raised by the Clonefactory contract.
type ClonefactoryContractCreatedIterator struct {
	Event *ClonefactoryContractCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClonefactoryContractCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClonefactoryContractCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClonefactoryContractCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClonefactoryContractCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClonefactoryContractCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClonefactoryContractCreated represents a ContractCreated event raised by the Clonefactory contract.
type ClonefactoryContractCreated struct {
	Address common.Address
	Pubkey  string
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterContractCreated is a free log retrieval operation binding the contract event 0x1b08e1646439b7521399d47f93ab6b1ebc92803e155d0b2f2ad2d4702a050804.
//
// Solidity: event contractCreated(address indexed _address, string _pubkey)
func (_Clonefactory *ClonefactoryFilterer) FilterContractCreated(opts *bind.FilterOpts, _address []common.Address) (*ClonefactoryContractCreatedIterator, error) {

	var _addressRule []interface{}
	for _, _addressItem := range _address {
		_addressRule = append(_addressRule, _addressItem)
	}

	logs, sub, err := _Clonefactory.contract.FilterLogs(opts, "contractCreated", _addressRule)
	if err != nil {
		return nil, err
	}
	return &ClonefactoryContractCreatedIterator{contract: _Clonefactory.contract, event: "contractCreated", logs: logs, sub: sub}, nil
}

// WatchContractCreated is a free log subscription operation binding the contract event 0x1b08e1646439b7521399d47f93ab6b1ebc92803e155d0b2f2ad2d4702a050804.
//
// Solidity: event contractCreated(address indexed _address, string _pubkey)
func (_Clonefactory *ClonefactoryFilterer) WatchContractCreated(opts *bind.WatchOpts, sink chan<- *ClonefactoryContractCreated, _address []common.Address) (event.Subscription, error) {

	var _addressRule []interface{}
	for _, _addressItem := range _address {
		_addressRule = append(_addressRule, _addressItem)
	}

	logs, sub, err := _Clonefactory.contract.WatchLogs(opts, "contractCreated", _addressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClonefactoryContractCreated)
				if err := _Clonefactory.contract.UnpackLog(event, "contractCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContractCreated is a log parse operation binding the contract event 0x1b08e1646439b7521399d47f93ab6b1ebc92803e155d0b2f2ad2d4702a050804.
//
// Solidity: event contractCreated(address indexed _address, string _pubkey)
func (_Clonefactory *ClonefactoryFilterer) ParseContractCreated(log types.Log) (*ClonefactoryContractCreated, error) {
	event := new(ClonefactoryContractCreated)
	if err := _Clonefactory.contract.UnpackLog(event, "contractCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
